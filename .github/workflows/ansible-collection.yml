name: Ansible Collection CI/CD

on:
  # Nightly unit tests
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  
  # Manual trigger for publishing
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to Ansible Galaxy'
        type: boolean
        required: true
        default: false

jobs:
  test:
    name: Run ansible-test units
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Capture Versions
        run: |
          echo "Python Version:" > versions-${{ matrix.python-version }}.txt
          python --version >> versions-${{ matrix.python-version }}.txt
          echo "Ansible Version:" >> versions-${{ matrix.python-version }}.txt
          ansible --version >> versions-${{ matrix.python-version }}.txt

      - name: Run unit tests
        run: |
          # Create directory structure and move files
          cd ..
          mkdir -p ansible_collections/benemon
          cp -r ${GITHUB_WORKSPACE} ansible_collections/benemon/hcp_community_collection
          cd ansible_collections/benemon/hcp_community_collection
          
          # Run ansible-test units
          ansible-test units --venv --python ${{ matrix.python-version }} -v
          
          # Copy test results
          mkdir -p ${GITHUB_WORKSPACE}/junit
          if [ -d "tests/output/junit" ]; then
            PYVER="${{ matrix.python-version }}"
            cp "tests/output/junit/python${PYVER}-controller-units.xml" "${GITHUB_WORKSPACE}/junit/"
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit/*.xml
            versions-${{ matrix.python-version }}.txt
          retention-days: 1

  integration:
    name: Run ansible-test integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Setup Integration Config
        run: |
          cd ..
          mkdir -p ansible_collections/benemon
          cp -r ${GITHUB_WORKSPACE} ansible_collections/benemon/hcp_community_collection
          cd ansible_collections/benemon/hcp_community_collection
          
          # Create integration config from template
          envsubst < tests/integration/integration_config.yml.template > tests/integration/integration_config.yml
        env:
          HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
          HCP_ORGANISATION_ID: ${{ secrets.HCP_ORGANISATION_ID }}
          HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
          PACKER_TEST_FINGERPRINT: ${{ secrets.PACKER_TEST_FINGERPRINT }}

      - name: Run integration tests
        run: |
          cd ../ansible_collections/benemon/hcp_community_collection
          ansible-test integration --venv --python ${{ matrix.python-version }} -v

          # Copy test results
          mkdir -p ${GITHUB_WORKSPACE}/junit
          if [ -d "tests/output/junit" ]; then
            PYVER="${{ matrix.python-version }}"
            cp "tests/output/junit/python${PYVER}-integration.xml" "${GITHUB_WORKSPACE}/junit/"
          fi

  collect-versions:
    name: Collect Version Information
    needs: [test, integration]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Version Files
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Combine Version Information
        run: |
          echo "# Test Matrix Versions" > combined_versions.md
          echo "Last run: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> combined_versions.md
          echo "" >> combined_versions.md
          echo "## Python and Ansible Versions Tested" >> combined_versions.md
          echo "" >> combined_versions.md
          for file in versions-*.txt; do
            echo "### Results for ${file#versions-}" >> combined_versions.md
            cat "$file" >> combined_versions.md
            echo "" >> combined_versions.md
          done

      - name: Upload Combined Versions
        uses: actions/upload-artifact@v4
        with:
          name: version-matrix
          path: combined_versions.md
          retention-days: 7

  publish-test-results:
    name: Publish Test Results
    needs: [test, integration]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: junit

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: "junit/**/*.xml"
          check_name: "Test Results"
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    name: Build and Publish Collection
    needs: [test, integration]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.publish == 'true' && 
      github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Build Ansible collection
        run: ansible-galaxy collection build

      - name: Publish to Ansible Galaxy
        run: |
          if [ -f galaxy.yml ]; then
            COLLECTION_ARCHIVE=$(ls *.tar.gz)
            ansible-galaxy collection publish \
              --api-key ${{ secrets.ANSIBLE_GALAXY_API_KEY }} \
              $COLLECTION_ARCHIVE
          else
            echo "galaxy.yml not found"
            exit 1
          fi